// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	confluent_kafka_go_v1kafka "gopkg.in/confluentinc/confluent-kafka-go.v1/kafka"

	mock "github.com/stretchr/testify/mock"
)

// KafkaConsumer is an autogenerated mock type for the KafkaConsumer type
type KafkaConsumer struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *KafkaConsumer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Poll provides a mock function with given fields: timeoutMs
func (_m *KafkaConsumer) Poll(timeoutMs int) confluent_kafka_go_v1kafka.Event {
	ret := _m.Called(timeoutMs)

	var r0 confluent_kafka_go_v1kafka.Event
	if rf, ok := ret.Get(0).(func(int) confluent_kafka_go_v1kafka.Event); ok {
		r0 = rf(timeoutMs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(confluent_kafka_go_v1kafka.Event)
		}
	}

	return r0
}

// SubscribeTopics provides a mock function with given fields: topics, rebalanceCb
func (_m *KafkaConsumer) SubscribeTopics(topics []string, rebalanceCb confluent_kafka_go_v1kafka.RebalanceCb) error {
	ret := _m.Called(topics, rebalanceCb)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, confluent_kafka_go_v1kafka.RebalanceCb) error); ok {
		r0 = rf(topics, rebalanceCb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
